name: Django CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    environment: Dev
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Connect to PostgreSQL
      run: |
        export DATABASE_URL=${{ secrets.POSTGRES_DB }}://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}
        npm install --save dotenv
        npm install --save pg
        node client.js
      # Environment variables used by the `client.js` script to create a new PostgreSQL table.
      env:
        # The hostname used to communicate with the PostgreSQL service container
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

    - name: Run Tests
      env:
        DEBUG: "0"
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
      run: |
        python ./project_chia/manage.py runserver
